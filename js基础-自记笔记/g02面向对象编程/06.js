/*
基于构造函数创建自定义类(constructor)
    1. 在普通函数执行的基础上 " new xxx()",这样就不是普通函数执行了,而是构造函数执行,当前的函数名称之为"类名",接受的返回结果是当前的这个实例
    2. 自己创建的类名最好第一个单词首字母大写
    3. 构造函数设计模式执行,主要用于组件,类库,插件,框架的封装,平时编写业务逻辑一般不这样处理
*/

function Fn() {}
//=> Fn(); //=> 普通函数执行
var f = new Fn(); // Fn是类,f是类的一个实例
console.log(f);

var f2 = new Fn(); // f2也是Fn的一个实例,f2和f是独立分开,互不影响

var obj1 = {}; //=> obj1是 Object的一个实例
var obj2 = {}; //=> obj2是 Object的一个实例
/* 
JS中创建值又两种方式
    1. 字面量表达式

    2.构造函数模式

*/

var obj = {} //=>字面量表达式
var obj = new Object(); //=>构造函数模式
//=>不管是哪一种方式创造出来的都是Object类的实例,而实例之间是独立分开的,所有 var xxx={},这种模式就是js模式中的单例模式


Object(); //=>普通函数执行
new Object();//=>构造函数执行


//=>基本数据类型基于两种不同的模式创造出来的值是不一样的
//=>基于字面量表达式创建出来的值是基本类型值
//=>基于构造函数创建出来的值是引用类型
//=>NUM2是数字类的实例,NUM1也是数字类的实例,它只是JS表达数字方式之一,都可以使用数字类提供的属性和方法
var num1 = 12
var num2 = new Number(12)

console.log(typeof num1); //=>"number"
console.log(typeof num2); //=>"object"
